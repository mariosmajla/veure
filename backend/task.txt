Ticket: Implement Refresh Token and Logout Feature

Description:
As a user, I want to be able to stay logged in for a longer period of time, and also to be able to log out of the application when I am done. To achieve this, we need to implement refresh token and logout functionality in our project.

Acceptance Criteria:

When a user logs in, a new refresh token should be generated along with the access token.
A new route /auth/refresh should be created to refresh the access token using the refresh token.
The refresh token should have a longer expiration time than the access token.
When a user logs out, both the access token and the refresh token should be invalidated.
The refresh token should be stored in a secure HttpOnly cookie to prevent XSS attacks.
The logout route should be accessible only to authenticated users.
Technical Details:

The backend is built with Node.js, using Sequelize ORM to interact with the PostgreSQL database.
The frontend is built with Vue.js.
The server should use JWT to generate access and refresh tokens.
The refresh token should be stored in the database along with the user's ID.
The /auth/refresh route should verify the refresh token, and if valid, generate a new access token and return it to the client.
The /auth/logout route should invalidate both the access and refresh tokens, and clear the refresh token cookie.
Tasks:

Create a RefreshToken model in Sequelize to store refresh tokens.
Create a JWT helper function to generate access and refresh tokens.
Implement the /auth/login route to generate a new refresh token along with the access token.
Implement the /auth/refresh route to generate a new access token using the refresh token.
Implement the /auth/logout route to invalidate both the access and refresh tokens, and clear the refresh token cookie.
Store the refresh token in a secure HttpOnly cookie on the client.
Update the frontend to handle the new /auth/refresh and /auth/logout routes.
Write tests to ensure that the new functionality is working as expected.
Let me know if you have any questions or need any further clarification.




Matej PaviÄ‡ -----------------------
So far i am doing the single sign on with google and if successful i create jwt token and send it to client, before that i create refresh token in the database. When user clicks the logout button, what should happen
Great question! When the user clicks the logout button, the following should happen:
------------------------------------

The client should send a request to the backend to log out the user.
On the backend, the server should invalidate both the access and refresh tokens associated with the user.
The server should clear the refresh token from the database.
The server should clear the refresh token cookie from the client browser.
The server should respond with a success message indicating that the logout was successful.
The client should clear any user-specific data and redirect the user to the login page or any other appropriate page.
Here is a breakdown of the steps in more detail:

The client should send a request to the backend to log out the user:

The client should make a POST request to a /logout endpoint on the backend.
The request should include the access token in the Authorization header.
On the backend, the server should invalidate both the access and refresh tokens associated with the user:

The server should decode the access token to get the user ID.
The server should invalidate the access token by adding it to a blacklist.
The server should invalidate the refresh token by deleting it from the database.
The server should clear the refresh token cookie from the client browser:

The server should send a response with a Set-Cookie header to clear the refresh token cookie.
The Set-Cookie header should have the same name and path as the cookie that was set when the user logged in, but with an empty value and a max age of 0.
The server should respond with a success message indicating that the logout was successful:

The server should send a response with a 200 status code and a JSON payload containing a success message.
The client should clear any user-specific data and redirect the user to the login page or any other appropriate page:

The client should clear any cached user data or state.
The client should redirect the user to the login page or any other appropriate page.
I hope this helps! Let me know if you have any further questions.